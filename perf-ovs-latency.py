# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2
#
# Copyright (C) 2021 Red Hat Inc.
# Author: Flavio Leitner <fbl@redhat.com>
#
# Perf script to process data collected by perf with
# specific probes loaded by perf-ovs-latency.sh to
# measure latency.
#

from __future__ import print_function

import os
import sys

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
    '/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

latency = autodict()
latency_rank = []

def nsec_to_sec(f):
    return f/1000000000.0

def sec_to_usec(f):
    return f*1000000.0

def trace_begin():
    print("%-3s %-18s %-10s %-20s %-20s %-20s" % \
            ("CPU", "skb","latency(us)", "ovs_port_receive",
             "do_output", "ovs_dp_upcall"))

def trace_end():
    latency_rank.sort()
    print("Best cases:")
    for i in range(0, 5):
        print(" {:7.2f}".format(latency_rank[i]))

    print("Worst cases:")
    for i in range(1, 6):
        print(" {:7.2f}".format(latency_rank[-i]))

def probe__ovs_vport_receive(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, skb, perf_sample_dict):
    latency[common_cpu][common_pid][skb] = ( common_secs, common_nsecs ) 

def print_packet_latency(common_cpu, common_pid, common_secs, common_nsecs,
                         skb, fmt):
    try:
        (ingress_secs, ingress_nsecs) = latency[common_cpu][common_pid][skb]
    except:
        # There is no recording of the entry point, so skip it.
        return

    ingress_total = ingress_secs + nsec_to_sec(ingress_nsecs)
    egress_total = common_secs + nsec_to_sec(common_nsecs)
    lat_nsecs = sec_to_usec(egress_total - ingress_total)
    latency_rank.append(lat_nsecs)
    del latency[common_cpu][common_pid][skb]
    print(fmt.format(common_cpu, skb, lat_nsecs, ingress_secs, ingress_nsecs,
          common_secs, common_nsecs))

def probe__do_output(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, skb, perf_sample_dict):
    fmt = "{:03d} 0x{:x} {:7.2f} {:>10d}.{:<9d} {:>10d}.{:<9d}"
    print_packet_latency(common_cpu, common_pid, common_secs, common_nsecs,
                         skb, fmt) 

def probe__ovs_dp_upcall(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, skb, perf_sample_dict):
    fmt = "{:03d} 0x{:x} {:7.2f} {:>10d}.{:<9d}" + " "*19 + "{:>10d}.{:<9d}"
    print_packet_latency(common_cpu, common_pid, common_secs, common_nsecs,
                         skb, fmt) 

def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
    pass

